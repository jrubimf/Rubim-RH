---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Rubim.
--- DateTime: 02/06/2018 12:53
---

local RubimRH = LibStub("AceAddon-3.0"):GetAddon("RubimRH")
local HL = HeroLib;
local Cache = HeroCache;
local Unit = HL.Unit;
local Player = Unit.Player;
local Target = Unit.Target;

function RubimRH.playSoundR(soundID)
    local isString = (type(soundID) == "string")
    if RubimRH.db.profile.mainOption.mute then
    else
        if not isString then
            PlaySound(soundID, "Master");
        else
            PlaySoundFile(soundID, "Master");
        end
    end
end

function RubimRH.GlowActionBarToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.glowactionbar == false then
        RubimRH.db.profile.mainOption.glowactionbar = true
    else
        RubimRH.HideButtonGlow()
        RubimRH.db.profile.mainOption.glowactionbar = false
    end
    print("|cFF69CCF0Glow Action Bar" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.glowactionbar))
end

function RubimRH.HideTextureToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.hidetexture == false then
        RubimRH.db.profile.mainOption.hidetexture = true
    else
        RubimRH.db.profile.mainOption.hidetexture = false
    end
    print("|cFF69CCF0Hide Texture" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.hidetexture))
end

function RubimRH.DebugToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.debug == false then
        RubimRH.db.profile.mainOption.debug = true
    else
        RubimRH.db.profile.mainOption.debug = false
    end
    print("|cFF69CCF0Verbose Debug" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.debug))
end

function RubimRH.CleaveToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.smartCleave == false then
        RubimRH.db.profile.mainOption.smartCleave = true
        RubimRH.db.profile.mainOption.disabledSpellsCleave = {}
    else
        RubimRH.db.profile.mainOption.smartCleave = false
    end
    print("|cFF69CCF0Use Cleave" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.smartCleave))
end

function RubimRH.burstCDToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.burstCD == false then
        RubimRH.db.profile.mainOption.burstCD = true
    else
        RubimRH.db.profile.mainOption.burstCD = false
    end
    print("|cFF69CCF0Burst CD" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.burstCD))
end

function RubimRH.MuteToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.mute == false then
        RubimRH.db.profile.mainOption.mute = true
    else
        RubimRH.db.profile.mainOption.mute = false
    end
    print("|cFF69CCF0Mutting Sounds" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.mute))
end

function RubimRH.MainIconToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.mainIcon == false then
        RubimRH.db.profile.mainOption.mainIcon = true
    else
        RubimRH.db.profile.mainOption.mainIcon = false
    end
    print("|cFF69CCF0Show Interface" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.mainIcon))
end

function RubimRH.MainIconLockToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.mainIconLock == false then
        RubimRH.db.profile.mainOption.mainIconLock = true
    else
        RubimRH.db.profile.mainOption.mainIconLock = false
    end
    print("|cFF69CCF0Icon Lock" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.mainIconLock))
end

function RubimRH.InterruptsToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.useInterrupts == false then
        RubimRH.db.profile.mainOption.useInterrupts = true
    else
        RubimRH.db.profile.mainOption.useInterrupts = false
    end
    print("|cFF69CCF0Use Interrupts" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.useInterrupts))
end

function RubimRH.CCToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.ccbreak == false then
        RubimRH.db.profile.mainOption.ccbreak = true
    else
        RubimRH.db.profile.mainOption.ccbreak = false
    end
    print("|cFF69CCF0CC Break" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.ccbreak))
end

function RubimRH.PerfectPull()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.PerfectPull == false then
        RubimRH.db.profile.mainOption.PerfectPull = true

    else
        RubimRH.db.profile.mainOption.PerfectPull = false
    end
    print("|cFF69CCF0Perfect Pull" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.PerfectPull))
end

-- Prot Paladin checkbox value change handler
function RubimRH.ASInterrupt()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[66].ASInterrupt == false then
        RubimRH.db.profile[66].ASInterrupt = true

    else
        RubimRH.db.profile[66].ASInterrupt = false
    end
    print("|cFF69CCF0Avenger's Shield interrupt" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[66].ASInterrupt))
end

-- Shadow priest Auto AoE
function RubimRH.ShadowAutoAoE()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[258].AutoAoE == false then
        RubimRH.db.profile[258].AutoAoE = true

    else
        RubimRH.db.profile[258].AutoAoE = false
    end
    print("|cFF69CCF0Automatic AoE" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[258].AutoAoE))
end

-- Affliction warlock Auto AoE
function RubimRH.AffliAutoAoE()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[265].AutoAoE == false then
        RubimRH.db.profile[265].AutoAoE = true

    else
        RubimRH.db.profile[265].AutoAoE = false
    end
    print("|cFF69CCF0Automatic AoE" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[265].AutoAoE))
end

-- Assasination Rogue Auto AoE
function RubimRH.AssaAutoAoE()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[259].AutoAoE == false then
        RubimRH.db.profile[259].AutoAoE = true

    else
        RubimRH.db.profile[259].AutoAoE = false
    end
    print("|cFF69CCF0Automatic AoE" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[259].AutoAoE))
end

-- Balance Druid auto morph checkbox handler
function RubimRH.AutoMorph()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[102].AutoMorph == false then
        RubimRH.db.profile[102].AutoMorph = true

    else
        RubimRH.db.profile[102].AutoMorph = false
    end
    print("|cFF69CCF0Auto morph to Moonkin form" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[102].AutoMorph))
end

-- Prot Warrior 
function RubimRH.UseShieldBlockDef()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[73].UseShieldBlockDef == false then
        RubimRH.db.profile[73].UseShieldBlockDef = true

    else
        RubimRH.db.profile[73].UseShieldBlockDef = false
    end
    print("|cFF69CCF0Use Shield Block Defensively " .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[73].UseShieldBlockDef))
end

function RubimRH.UseRageDef()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[73].UseRageDef == false then
        RubimRH.db.profile[73].UseRageDef = true

    else
        RubimRH.db.profile[73].UseRageDef = false
    end
    print("|cFF69CCF0Use your Rage Defensively " .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[73].UseRageDef))
end

function RubimRH.UseLastStandToFill()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[73].UseLastStandToFill == false then
        RubimRH.db.profile[73].UseLastStandToFill = true

    else
        RubimRH.db.profile[73].UseLastStandToFill = false
    end
    print("|cFF69CCF0Use LastStand To Fill ShieldBlock DownTime " .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[73].UseLastStandToFill))
end

-- Resto druid Force Rejuv handler
function RubimRH.ForceRejuv()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[105].force_rejuv == false then
        RubimRH.db.profile[105].force_rejuv = true

    else
        RubimRH.db.profile[105].force_rejuv = false
    end
    print("|cFF69CCF0Force Rejuvenation on everyone" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[105].force_rejuv))
end

-- Resto Druid Sync DBM Cds
function RubimRH.DBMSync()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[105].dbm_sync == false then
        RubimRH.db.profile[105].dbm_sync = true

    else
        RubimRH.db.profile[105].dbm_sync = false
    end
    print("|cFF69CCF0CDs Synchronization with DBM events " .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[105].dbm_sync))
end

function RubimRH.PrecombatToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.Precombat == false then
        RubimRH.db.profile.mainOption.Precombat = true

    else
        RubimRH.db.profile.mainOption.Precombat = false
    end
    print("|cFF69CCF0Precombat" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.Precombat))
end

function RubimRH.InstantInterruptToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.InstantInterrupt == false then
        RubimRH.db.profile.mainOption.InstantInterrupt = true

    else
        RubimRH.db.profile.mainOption.InstantInterrupt = false
    end
    print("|cFF69CCF0Instant Interrupt" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.InstantInterrupt))
end

function RubimRH.InterruptEverythingToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.InterruptEverything == false then
        RubimRH.db.profile.mainOption.InterruptEverything = true

    else
        RubimRH.db.profile.mainOption.InterruptEverything = false
    end
    print("|cFF69CCF0Interrupt Everything" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.InterruptEverything))
end

function RubimRH.RacialToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.useRacial == false then
        RubimRH.db.profile.mainOption.useRacial = true

    else
        RubimRH.db.profile.mainOption.useRacial = false
    end
    print("|cFF69CCF0Racial" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.useRacial))
end

function RubimRH.CDToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile[RubimRH.playerSpec].cooldown == false then
        RubimRH.db.profile[RubimRH.playerSpec].cooldown = true
        RubimRH.burstCDtimer = GetTime()
    else
        RubimRH.db.profile.mainOption.disabledSpellsCD = {}
        RubimRH.db.profile[RubimRH.playerSpec].cooldown = false
    end
    print("|cFF69CCF0CD" .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile[RubimRH.playerSpec].cooldown))
end

function RubimRH.AttackToggle()
    RubimRH.playSoundR(891);
    if RubimRH.db.profile.mainOption.startattack == false then
        RubimRH.db.profile.mainOption.startattack = true
    else
        RubimRH.db.profile.mainOption.startattack = false
    end
    print("|cFF69CCF0Auto-Skill: " .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.startattack))
end

RubimRH.useAoE = true
function RubimRH.AoEToggle()
    RubimRH.playSoundR(891);
    if RubimRH.useAoE == false then
        RubimRH.useAoE = true
    else
        RubimRH.useAoE = false
    end
    print("|cFF69CCF0AoE" .. "|r: |cFF00FF00" .. tostring(RubimRH.useAoE))
end

function RubimRH.CDsON()
    if RubimRH.config.cooldown == true then
        if RubimRH.db.profile.mainOption.cooldownsUsage == "Everything" then
            return true
        end

        if Target:IsDummy() then
            return true
        end

        if Target:IsAPvPDummy() then
            return true
        end

        if UnitIsPlayer("target") then
            return true
        end

        if RubimRH.db.profile.mainOption.cooldownsUsage == "Boss Only" then
            if UnitExists("boss1") == true then
                return true
            end

            if UnitExists("target") and (UnitClassification("target") == "worldboss" or UnitClassification("target") == "rareelite" or UnitClassification("target") == "rare") then
                return true
            end
        end
    end
    return false
end

function RubimRH.AoEON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.useAoE == true then
        return true
    else
        return false
    end
end

function RubimRH.RacialON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.useRacial == true then
        return true
    else
        return false
    end
end

function RubimRH.CleaveON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.smartCleave == true then
        return true
    else
        return false
    end
end

function RubimRH.CCBreakON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.ccbreak == true then
        return true
    else
        return false
    end
end

function RubimRH.PerfectPullON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.PerfectPull == true then
        return true
    else
        return false
    end
end

function RubimRH.AutoAttackON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.startattack == true then
        return true
    else
        return false
    end
end

-- Prot Paladin Avenger Shield UI function
function RubimRH.ASInterruptON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[66].ASInterrupt == true then
        return true
    else
        return false
    end
end

-- Shadow priest
function RubimRH.ShadowAutoAoEON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[258].AutoAoE == true then
        return true
    else
        return false
    end
end

-- Affli lock UI function
function RubimRH.AffliAutoAoEON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[265].AutoAoE == true then
        return true
    else
        return false
    end
end

-- Assa Rogue UI function
function RubimRH.AssaAutoAoEON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[259].AutoAoE == true then
        return true
    else
        return false
    end
end

-- Druid Auto Morph UI
function RubimRH.AutoMorphON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[102].AutoMorph == true then
        return true
    else
        return false
    end
end

-- Protection Warrior
function RubimRH.UseShieldBlockDefON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[73].UseShieldBlockDefensively == true then
        return true
    else
        return false
    end
end

function RubimRH.UseRageDefON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[73].UseRageDefensively == true then
        return true
    else
        return false
    end
end

function RubimRH.UseLastStandToFillON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[73].UseLastStandToFill == true then
        return true
    else
        return false
    end
end

function RubimRH.ForceRejuvON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[105].force_rejuv == true then
        return true
    else
        return false
    end
end

function RubimRH.DBMSyncON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile[105].dbm_sync == true then
        return true
    else
        return false
    end
end

function RubimRH.PrecombatON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.Precombat == true then
        return true
    else
        return false
    end
end

function RubimRH.InstantInterruptON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.InstantInterrupt == true then
        return true
    else
        return false
    end
end

function RubimRH.InterruptEverythingON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.InterruptEverything == true then
        return true
    else
        return false
    end
end

function RubimRH.InterruptsON()
    if RubimRH.db == nil then
        return false
    end
    if RubimRH.db.profile.mainOption.useInterrupts == true then
        return true
    else
        return false
    end
end

local options, configOptions = nil, {}
--[[ This options table is used in the GUI config. ]]--


local function getOptions()
    if not options then
        options = {
            type = "group",
            name = "RubimRH",
            args = {
                mainOptions = {
                    order = 1,
                    type = "group",
                    name = "General",
                    childGroups = "tab",
                    args = {
                        keybind = {
                            order = 3,
                            type = "group",
                            childGroups = "tree",
                            inline = true,
                            name = "Keybinds",
                            get = function(info)
                                local key = info.arg or info[#info]
                                return RubimRH.db.profile.mainOption[key]
                            end,
                            set = function(info, value)
                                local key = info.arg or info[#info]
                                RubimRH.db.profile.mainOption[key] = value
                            end,
                            args = {
                                bindingsText = {
                                    order = 1,
                                    type = "description",
                                    name = "To change keybindgs, press ESC > Keybindings > RubimRH.",
                                    fontSize = "large",
                                },
                            }
                        },
                        classConfig = {
                            order = 2,
                            type = "group",
                            childGroups = "tree",
                            inline = true,
                            name = "Configuration",
                            args = {
                                description = {
                                    order = 1,
                                    type = "description",
                                    name = "All configuration was moved to the Class Config.",
                                    fontSize = "large",
                                },
                            }
                        },
                    }
                },
            }
        }
        for k, v in pairs(configOptions) do
            options.args[k] = (type(v) == "function") and v() or v
        end
    end

    return options
end

local function openConfig()
    InterfaceOptionsFrame_OpenToCategory(RubimRH.optionsFrames.Profiles)
    InterfaceOptionsFrame_OpenToCategory(RubimRH.optionsFrames.RubimRH)

    InterfaceOptionsFrame:Raise()
end

function RubimRH:SetupOptions()
    self.optionsFrames = {}
    LibStub("AceConfigRegistry-3.0"):RegisterOptionsTable("RubimRH", getOptions)
    self.optionsFrames.RubimRH = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", nil, nil, "mainOptions")
    configOptions["Profiles"] = LibStub("AceDBOptions-3.0"):GetOptionsTable(self.db)
    self.optionsFrames["Profiles"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Profiles", "RubimRH", "Profiles")
    LibStub("AceConsole-3.0"):RegisterChatCommand("RubimRH", openConfig)
end
